// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/contract/service.go
//
// Generated by this command:
//
//	mockgen -package mocks -source=internal/domain/contract/service.go -destination=mocks/service.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dto "github.com/diegoclair/leaderpro/internal/application/dto"
	entity "github.com/diegoclair/leaderpro/internal/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockUserApp is a mock of UserApp interface.
type MockUserApp struct {
	ctrl     *gomock.Controller
	recorder *MockUserAppMockRecorder
	isgomock struct{}
}

// MockUserAppMockRecorder is the mock recorder for MockUserApp.
type MockUserAppMockRecorder struct {
	mock *MockUserApp
}

// NewMockUserApp creates a new mock instance.
func NewMockUserApp(ctrl *gomock.Controller) *MockUserApp {
	mock := &MockUserApp{ctrl: ctrl}
	mock.recorder = &MockUserAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserApp) EXPECT() *MockUserAppMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserApp) CreateUser(ctx context.Context, user entity.User) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserAppMockRecorder) CreateUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserApp)(nil).CreateUser), ctx, user)
}

// GetLoggedUser mocks base method.
func (m *MockUserApp) GetLoggedUser(ctx context.Context) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoggedUser", ctx)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoggedUser indicates an expected call of GetLoggedUser.
func (mr *MockUserAppMockRecorder) GetLoggedUser(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoggedUser", reflect.TypeOf((*MockUserApp)(nil).GetLoggedUser), ctx)
}

// GetLoggedUserID mocks base method.
func (m *MockUserApp) GetLoggedUserID(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoggedUserID", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoggedUserID indicates an expected call of GetLoggedUserID.
func (mr *MockUserAppMockRecorder) GetLoggedUserID(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoggedUserID", reflect.TypeOf((*MockUserApp)(nil).GetLoggedUserID), ctx)
}

// GetProfile mocks base method.
func (m *MockUserApp) GetProfile(ctx context.Context) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", ctx)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockUserAppMockRecorder) GetProfile(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockUserApp)(nil).GetProfile), ctx)
}

// GetUserByEmail mocks base method.
func (m *MockUserApp) GetUserByEmail(ctx context.Context, email string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserAppMockRecorder) GetUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserApp)(nil).GetUserByEmail), ctx, email)
}

// GetUserByUUID mocks base method.
func (m *MockUserApp) GetUserByUUID(ctx context.Context, userUUID string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUUID", ctx, userUUID)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUUID indicates an expected call of GetUserByUUID.
func (mr *MockUserAppMockRecorder) GetUserByUUID(ctx, userUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUUID", reflect.TypeOf((*MockUserApp)(nil).GetUserByUUID), ctx, userUUID)
}

// UpdateProfile mocks base method.
func (m *MockUserApp) UpdateProfile(ctx context.Context, user entity.User) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", ctx, user)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockUserAppMockRecorder) UpdateProfile(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockUserApp)(nil).UpdateProfile), ctx, user)
}

// UpdateUser mocks base method.
func (m *MockUserApp) UpdateUser(ctx context.Context, userUUID string, user entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, userUUID, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserAppMockRecorder) UpdateUser(ctx, userUUID, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserApp)(nil).UpdateUser), ctx, userUUID, user)
}

// MockAuthApp is a mock of AuthApp interface.
type MockAuthApp struct {
	ctrl     *gomock.Controller
	recorder *MockAuthAppMockRecorder
	isgomock struct{}
}

// MockAuthAppMockRecorder is the mock recorder for MockAuthApp.
type MockAuthAppMockRecorder struct {
	mock *MockAuthApp
}

// NewMockAuthApp creates a new mock instance.
func NewMockAuthApp(ctrl *gomock.Controller) *MockAuthApp {
	mock := &MockAuthApp{ctrl: ctrl}
	mock.recorder = &MockAuthAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthApp) EXPECT() *MockAuthAppMockRecorder {
	return m.recorder
}

// CreateSession mocks base method.
func (m *MockAuthApp) CreateSession(ctx context.Context, session dto.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ctx, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockAuthAppMockRecorder) CreateSession(ctx, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockAuthApp)(nil).CreateSession), ctx, session)
}

// GetLoggedUserID mocks base method.
func (m *MockAuthApp) GetLoggedUserID(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoggedUserID", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoggedUserID indicates an expected call of GetLoggedUserID.
func (mr *MockAuthAppMockRecorder) GetLoggedUserID(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoggedUserID", reflect.TypeOf((*MockAuthApp)(nil).GetLoggedUserID), ctx)
}

// GetSessionByUUID mocks base method.
func (m *MockAuthApp) GetSessionByUUID(ctx context.Context, sessionUUID string) (dto.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionByUUID", ctx, sessionUUID)
	ret0, _ := ret[0].(dto.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionByUUID indicates an expected call of GetSessionByUUID.
func (mr *MockAuthAppMockRecorder) GetSessionByUUID(ctx, sessionUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionByUUID", reflect.TypeOf((*MockAuthApp)(nil).GetSessionByUUID), ctx, sessionUUID)
}

// Login mocks base method.
func (m *MockAuthApp) Login(ctx context.Context, input dto.LoginInput) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, input)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthAppMockRecorder) Login(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthApp)(nil).Login), ctx, input)
}

// Logout mocks base method.
func (m *MockAuthApp) Logout(ctx context.Context, accessToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", ctx, accessToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockAuthAppMockRecorder) Logout(ctx, accessToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockAuthApp)(nil).Logout), ctx, accessToken)
}

// MockCompanyApp is a mock of CompanyApp interface.
type MockCompanyApp struct {
	ctrl     *gomock.Controller
	recorder *MockCompanyAppMockRecorder
	isgomock struct{}
}

// MockCompanyAppMockRecorder is the mock recorder for MockCompanyApp.
type MockCompanyAppMockRecorder struct {
	mock *MockCompanyApp
}

// NewMockCompanyApp creates a new mock instance.
func NewMockCompanyApp(ctrl *gomock.Controller) *MockCompanyApp {
	mock := &MockCompanyApp{ctrl: ctrl}
	mock.recorder = &MockCompanyAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompanyApp) EXPECT() *MockCompanyAppMockRecorder {
	return m.recorder
}

// CreateCompany mocks base method.
func (m *MockCompanyApp) CreateCompany(ctx context.Context, company entity.Company) (entity.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompany", ctx, company)
	ret0, _ := ret[0].(entity.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCompany indicates an expected call of CreateCompany.
func (mr *MockCompanyAppMockRecorder) CreateCompany(ctx, company any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompany", reflect.TypeOf((*MockCompanyApp)(nil).CreateCompany), ctx, company)
}

// DeleteCompany mocks base method.
func (m *MockCompanyApp) DeleteCompany(ctx context.Context, companyUUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCompany", ctx, companyUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCompany indicates an expected call of DeleteCompany.
func (mr *MockCompanyAppMockRecorder) DeleteCompany(ctx, companyUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCompany", reflect.TypeOf((*MockCompanyApp)(nil).DeleteCompany), ctx, companyUUID)
}

// GetCompanyByUUID mocks base method.
func (m *MockCompanyApp) GetCompanyByUUID(ctx context.Context, companyUUID string) (entity.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyByUUID", ctx, companyUUID)
	ret0, _ := ret[0].(entity.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyByUUID indicates an expected call of GetCompanyByUUID.
func (mr *MockCompanyAppMockRecorder) GetCompanyByUUID(ctx, companyUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyByUUID", reflect.TypeOf((*MockCompanyApp)(nil).GetCompanyByUUID), ctx, companyUUID)
}

// GetUserCompanies mocks base method.
func (m *MockCompanyApp) GetUserCompanies(ctx context.Context) ([]entity.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCompanies", ctx)
	ret0, _ := ret[0].([]entity.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCompanies indicates an expected call of GetUserCompanies.
func (mr *MockCompanyAppMockRecorder) GetUserCompanies(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCompanies", reflect.TypeOf((*MockCompanyApp)(nil).GetUserCompanies), ctx)
}

// UpdateCompany mocks base method.
func (m *MockCompanyApp) UpdateCompany(ctx context.Context, companyUUID string, company entity.Company) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCompany", ctx, companyUUID, company)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCompany indicates an expected call of UpdateCompany.
func (mr *MockCompanyAppMockRecorder) UpdateCompany(ctx, companyUUID, company any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCompany", reflect.TypeOf((*MockCompanyApp)(nil).UpdateCompany), ctx, companyUUID, company)
}

// MockPersonApp is a mock of PersonApp interface.
type MockPersonApp struct {
	ctrl     *gomock.Controller
	recorder *MockPersonAppMockRecorder
	isgomock struct{}
}

// MockPersonAppMockRecorder is the mock recorder for MockPersonApp.
type MockPersonAppMockRecorder struct {
	mock *MockPersonApp
}

// NewMockPersonApp creates a new mock instance.
func NewMockPersonApp(ctrl *gomock.Controller) *MockPersonApp {
	mock := &MockPersonApp{ctrl: ctrl}
	mock.recorder = &MockPersonAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersonApp) EXPECT() *MockPersonAppMockRecorder {
	return m.recorder
}

// CreateNote mocks base method.
func (m *MockPersonApp) CreateNote(ctx context.Context, note entity.Note, companyUUID, personUUID string) (entity.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNote", ctx, note, companyUUID, personUUID)
	ret0, _ := ret[0].(entity.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNote indicates an expected call of CreateNote.
func (mr *MockPersonAppMockRecorder) CreateNote(ctx, note, companyUUID, personUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNote", reflect.TypeOf((*MockPersonApp)(nil).CreateNote), ctx, note, companyUUID, personUUID)
}

// CreatePerson mocks base method.
func (m *MockPersonApp) CreatePerson(ctx context.Context, person entity.Person, companyUUID string) (entity.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePerson", ctx, person, companyUUID)
	ret0, _ := ret[0].(entity.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePerson indicates an expected call of CreatePerson.
func (mr *MockPersonAppMockRecorder) CreatePerson(ctx, person, companyUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePerson", reflect.TypeOf((*MockPersonApp)(nil).CreatePerson), ctx, person, companyUUID)
}

// DeleteNote mocks base method.
func (m *MockPersonApp) DeleteNote(ctx context.Context, noteUUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNote", ctx, noteUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNote indicates an expected call of DeleteNote.
func (mr *MockPersonAppMockRecorder) DeleteNote(ctx, noteUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNote", reflect.TypeOf((*MockPersonApp)(nil).DeleteNote), ctx, noteUUID)
}

// DeletePerson mocks base method.
func (m *MockPersonApp) DeletePerson(ctx context.Context, personUUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePerson", ctx, personUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePerson indicates an expected call of DeletePerson.
func (mr *MockPersonAppMockRecorder) DeletePerson(ctx, personUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePerson", reflect.TypeOf((*MockPersonApp)(nil).DeletePerson), ctx, personUUID)
}

// GetCompanyPeople mocks base method.
func (m *MockPersonApp) GetCompanyPeople(ctx context.Context, companyUUID string) ([]entity.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyPeople", ctx, companyUUID)
	ret0, _ := ret[0].([]entity.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyPeople indicates an expected call of GetCompanyPeople.
func (mr *MockPersonAppMockRecorder) GetCompanyPeople(ctx, companyUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyPeople", reflect.TypeOf((*MockPersonApp)(nil).GetCompanyPeople), ctx, companyUUID)
}

// GetPersonByUUID mocks base method.
func (m *MockPersonApp) GetPersonByUUID(ctx context.Context, personUUID string) (entity.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersonByUUID", ctx, personUUID)
	ret0, _ := ret[0].(entity.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPersonByUUID indicates an expected call of GetPersonByUUID.
func (mr *MockPersonAppMockRecorder) GetPersonByUUID(ctx, personUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersonByUUID", reflect.TypeOf((*MockPersonApp)(nil).GetPersonByUUID), ctx, personUUID)
}

// GetPersonMentions mocks base method.
func (m *MockPersonApp) GetPersonMentions(ctx context.Context, personUUID string, take, skip int64) ([]entity.MentionEntry, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersonMentions", ctx, personUUID, take, skip)
	ret0, _ := ret[0].([]entity.MentionEntry)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPersonMentions indicates an expected call of GetPersonMentions.
func (mr *MockPersonAppMockRecorder) GetPersonMentions(ctx, personUUID, take, skip any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersonMentions", reflect.TypeOf((*MockPersonApp)(nil).GetPersonMentions), ctx, personUUID, take, skip)
}

// GetPersonTimeline mocks base method.
func (m *MockPersonApp) GetPersonTimeline(ctx context.Context, personUUID string, take, skip int64) ([]entity.TimelineEntry, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersonTimeline", ctx, personUUID, take, skip)
	ret0, _ := ret[0].([]entity.TimelineEntry)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPersonTimeline indicates an expected call of GetPersonTimeline.
func (mr *MockPersonAppMockRecorder) GetPersonTimeline(ctx, personUUID, take, skip any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersonTimeline", reflect.TypeOf((*MockPersonApp)(nil).GetPersonTimeline), ctx, personUUID, take, skip)
}

// SearchPeople mocks base method.
func (m *MockPersonApp) SearchPeople(ctx context.Context, companyUUID, search string) ([]entity.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchPeople", ctx, companyUUID, search)
	ret0, _ := ret[0].([]entity.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchPeople indicates an expected call of SearchPeople.
func (mr *MockPersonAppMockRecorder) SearchPeople(ctx, companyUUID, search any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchPeople", reflect.TypeOf((*MockPersonApp)(nil).SearchPeople), ctx, companyUUID, search)
}

// UpdateNote mocks base method.
func (m *MockPersonApp) UpdateNote(ctx context.Context, noteUUID string, note entity.Note) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNote", ctx, noteUUID, note)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNote indicates an expected call of UpdateNote.
func (mr *MockPersonAppMockRecorder) UpdateNote(ctx, noteUUID, note any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNote", reflect.TypeOf((*MockPersonApp)(nil).UpdateNote), ctx, noteUUID, note)
}

// UpdatePerson mocks base method.
func (m *MockPersonApp) UpdatePerson(ctx context.Context, personUUID string, person entity.Person) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePerson", ctx, personUUID, person)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePerson indicates an expected call of UpdatePerson.
func (mr *MockPersonAppMockRecorder) UpdatePerson(ctx, personUUID, person any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePerson", reflect.TypeOf((*MockPersonApp)(nil).UpdatePerson), ctx, personUUID, person)
}
