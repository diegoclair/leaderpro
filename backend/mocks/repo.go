// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/contract/repo.go
//
// Generated by this command:
//
//	mockgen -package mocks -source=internal/domain/contract/repo.go -destination=mocks/repo.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	dto "github.com/diegoclair/leaderpro/internal/application/dto"
	contract "github.com/diegoclair/leaderpro/internal/domain/contract"
	entity "github.com/diegoclair/leaderpro/internal/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockDataManager is a mock of DataManager interface.
type MockDataManager struct {
	ctrl     *gomock.Controller
	recorder *MockDataManagerMockRecorder
	isgomock struct{}
}

// MockDataManagerMockRecorder is the mock recorder for MockDataManager.
type MockDataManagerMockRecorder struct {
	mock *MockDataManager
}

// NewMockDataManager creates a new mock instance.
func NewMockDataManager(ctrl *gomock.Controller) *MockDataManager {
	mock := &MockDataManager{ctrl: ctrl}
	mock.recorder = &MockDataManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataManager) EXPECT() *MockDataManagerMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *MockDataManager) Auth() contract.AuthRepo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth")
	ret0, _ := ret[0].(contract.AuthRepo)
	return ret0
}

// Auth indicates an expected call of Auth.
func (mr *MockDataManagerMockRecorder) Auth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockDataManager)(nil).Auth))
}

// Company mocks base method.
func (m *MockDataManager) Company() contract.CompanyRepo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Company")
	ret0, _ := ret[0].(contract.CompanyRepo)
	return ret0
}

// Company indicates an expected call of Company.
func (mr *MockDataManagerMockRecorder) Company() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Company", reflect.TypeOf((*MockDataManager)(nil).Company))
}

// Note mocks base method.
func (m *MockDataManager) Note() contract.NoteRepo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Note")
	ret0, _ := ret[0].(contract.NoteRepo)
	return ret0
}

// Note indicates an expected call of Note.
func (mr *MockDataManagerMockRecorder) Note() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Note", reflect.TypeOf((*MockDataManager)(nil).Note))
}

// Person mocks base method.
func (m *MockDataManager) Person() contract.PersonRepo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Person")
	ret0, _ := ret[0].(contract.PersonRepo)
	return ret0
}

// Person indicates an expected call of Person.
func (mr *MockDataManagerMockRecorder) Person() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Person", reflect.TypeOf((*MockDataManager)(nil).Person))
}

// User mocks base method.
func (m *MockDataManager) User() contract.UserRepo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User")
	ret0, _ := ret[0].(contract.UserRepo)
	return ret0
}

// User indicates an expected call of User.
func (mr *MockDataManagerMockRecorder) User() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockDataManager)(nil).User))
}

// WithTransaction mocks base method.
func (m *MockDataManager) WithTransaction(ctx context.Context, fn func(contract.DataManager) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTransaction", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithTransaction indicates an expected call of WithTransaction.
func (mr *MockDataManagerMockRecorder) WithTransaction(ctx, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTransaction", reflect.TypeOf((*MockDataManager)(nil).WithTransaction), ctx, fn)
}

// MockAuthRepo is a mock of AuthRepo interface.
type MockAuthRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAuthRepoMockRecorder
	isgomock struct{}
}

// MockAuthRepoMockRecorder is the mock recorder for MockAuthRepo.
type MockAuthRepoMockRecorder struct {
	mock *MockAuthRepo
}

// NewMockAuthRepo creates a new mock instance.
func NewMockAuthRepo(ctrl *gomock.Controller) *MockAuthRepo {
	mock := &MockAuthRepo{ctrl: ctrl}
	mock.recorder = &MockAuthRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthRepo) EXPECT() *MockAuthRepoMockRecorder {
	return m.recorder
}

// CreateSession mocks base method.
func (m *MockAuthRepo) CreateSession(ctx context.Context, session dto.Session) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ctx, session)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockAuthRepoMockRecorder) CreateSession(ctx, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockAuthRepo)(nil).CreateSession), ctx, session)
}

// GetSessionByUUID mocks base method.
func (m *MockAuthRepo) GetSessionByUUID(ctx context.Context, sessionUUID string) (dto.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionByUUID", ctx, sessionUUID)
	ret0, _ := ret[0].(dto.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionByUUID indicates an expected call of GetSessionByUUID.
func (mr *MockAuthRepoMockRecorder) GetSessionByUUID(ctx, sessionUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionByUUID", reflect.TypeOf((*MockAuthRepo)(nil).GetSessionByUUID), ctx, sessionUUID)
}

// SetSessionAsBlocked mocks base method.
func (m *MockAuthRepo) SetSessionAsBlocked(ctx context.Context, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSessionAsBlocked", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSessionAsBlocked indicates an expected call of SetSessionAsBlocked.
func (mr *MockAuthRepoMockRecorder) SetSessionAsBlocked(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSessionAsBlocked", reflect.TypeOf((*MockAuthRepo)(nil).SetSessionAsBlocked), ctx, userID)
}

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
	isgomock struct{}
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepo) CreateUser(ctx context.Context, user entity.User) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepoMockRecorder) CreateUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepo)(nil).CreateUser), ctx, user)
}

// CreateUserPreferences mocks base method.
func (m *MockUserRepo) CreateUserPreferences(ctx context.Context, preferences entity.UserPreferences) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserPreferences", ctx, preferences)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserPreferences indicates an expected call of CreateUserPreferences.
func (mr *MockUserRepoMockRecorder) CreateUserPreferences(ctx, preferences any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserPreferences", reflect.TypeOf((*MockUserRepo)(nil).CreateUserPreferences), ctx, preferences)
}

// GetUserByEmail mocks base method.
func (m *MockUserRepo) GetUserByEmail(ctx context.Context, email string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserRepoMockRecorder) GetUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserRepo)(nil).GetUserByEmail), ctx, email)
}

// GetUserByUUID mocks base method.
func (m *MockUserRepo) GetUserByUUID(ctx context.Context, userUUID string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUUID", ctx, userUUID)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUUID indicates an expected call of GetUserByUUID.
func (mr *MockUserRepoMockRecorder) GetUserByUUID(ctx, userUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUUID", reflect.TypeOf((*MockUserRepo)(nil).GetUserByUUID), ctx, userUUID)
}

// GetUserIDByUUID mocks base method.
func (m *MockUserRepo) GetUserIDByUUID(ctx context.Context, userUUID string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDByUUID", ctx, userUUID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIDByUUID indicates an expected call of GetUserIDByUUID.
func (mr *MockUserRepoMockRecorder) GetUserIDByUUID(ctx, userUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDByUUID", reflect.TypeOf((*MockUserRepo)(nil).GetUserIDByUUID), ctx, userUUID)
}

// GetUserPreferences mocks base method.
func (m *MockUserRepo) GetUserPreferences(ctx context.Context, userID int64) (entity.UserPreferences, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPreferences", ctx, userID)
	ret0, _ := ret[0].(entity.UserPreferences)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPreferences indicates an expected call of GetUserPreferences.
func (mr *MockUserRepoMockRecorder) GetUserPreferences(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPreferences", reflect.TypeOf((*MockUserRepo)(nil).GetUserPreferences), ctx, userID)
}

// UpdateLastLogin mocks base method.
func (m *MockUserRepo) UpdateLastLogin(ctx context.Context, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLastLogin", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLastLogin indicates an expected call of UpdateLastLogin.
func (mr *MockUserRepoMockRecorder) UpdateLastLogin(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLastLogin", reflect.TypeOf((*MockUserRepo)(nil).UpdateLastLogin), ctx, userID)
}

// UpdateUser mocks base method.
func (m *MockUserRepo) UpdateUser(ctx context.Context, userID int64, user entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, userID, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserRepoMockRecorder) UpdateUser(ctx, userID, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserRepo)(nil).UpdateUser), ctx, userID, user)
}

// UpdateUserPreferences mocks base method.
func (m *MockUserRepo) UpdateUserPreferences(ctx context.Context, userID int64, preferences entity.UserPreferences) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPreferences", ctx, userID, preferences)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserPreferences indicates an expected call of UpdateUserPreferences.
func (mr *MockUserRepoMockRecorder) UpdateUserPreferences(ctx, userID, preferences any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPreferences", reflect.TypeOf((*MockUserRepo)(nil).UpdateUserPreferences), ctx, userID, preferences)
}

// MockCompanyRepo is a mock of CompanyRepo interface.
type MockCompanyRepo struct {
	ctrl     *gomock.Controller
	recorder *MockCompanyRepoMockRecorder
	isgomock struct{}
}

// MockCompanyRepoMockRecorder is the mock recorder for MockCompanyRepo.
type MockCompanyRepoMockRecorder struct {
	mock *MockCompanyRepo
}

// NewMockCompanyRepo creates a new mock instance.
func NewMockCompanyRepo(ctrl *gomock.Controller) *MockCompanyRepo {
	mock := &MockCompanyRepo{ctrl: ctrl}
	mock.recorder = &MockCompanyRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompanyRepo) EXPECT() *MockCompanyRepoMockRecorder {
	return m.recorder
}

// CreateCompany mocks base method.
func (m *MockCompanyRepo) CreateCompany(ctx context.Context, company entity.Company) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompany", ctx, company)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCompany indicates an expected call of CreateCompany.
func (mr *MockCompanyRepoMockRecorder) CreateCompany(ctx, company any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompany", reflect.TypeOf((*MockCompanyRepo)(nil).CreateCompany), ctx, company)
}

// DeleteCompany mocks base method.
func (m *MockCompanyRepo) DeleteCompany(ctx context.Context, companyID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCompany", ctx, companyID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCompany indicates an expected call of DeleteCompany.
func (mr *MockCompanyRepoMockRecorder) DeleteCompany(ctx, companyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCompany", reflect.TypeOf((*MockCompanyRepo)(nil).DeleteCompany), ctx, companyID)
}

// GetCompaniesByUser mocks base method.
func (m *MockCompanyRepo) GetCompaniesByUser(ctx context.Context, userID int64) ([]entity.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompaniesByUser", ctx, userID)
	ret0, _ := ret[0].([]entity.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompaniesByUser indicates an expected call of GetCompaniesByUser.
func (mr *MockCompanyRepoMockRecorder) GetCompaniesByUser(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompaniesByUser", reflect.TypeOf((*MockCompanyRepo)(nil).GetCompaniesByUser), ctx, userID)
}

// GetCompanyByID mocks base method.
func (m *MockCompanyRepo) GetCompanyByID(ctx context.Context, companyID int64) (entity.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyByID", ctx, companyID)
	ret0, _ := ret[0].(entity.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyByID indicates an expected call of GetCompanyByID.
func (mr *MockCompanyRepoMockRecorder) GetCompanyByID(ctx, companyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyByID", reflect.TypeOf((*MockCompanyRepo)(nil).GetCompanyByID), ctx, companyID)
}

// GetCompanyByUUID mocks base method.
func (m *MockCompanyRepo) GetCompanyByUUID(ctx context.Context, companyUUID string) (entity.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyByUUID", ctx, companyUUID)
	ret0, _ := ret[0].(entity.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyByUUID indicates an expected call of GetCompanyByUUID.
func (mr *MockCompanyRepoMockRecorder) GetCompanyByUUID(ctx, companyUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyByUUID", reflect.TypeOf((*MockCompanyRepo)(nil).GetCompanyByUUID), ctx, companyUUID)
}

// UpdateCompany mocks base method.
func (m *MockCompanyRepo) UpdateCompany(ctx context.Context, companyID int64, company entity.Company) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCompany", ctx, companyID, company)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCompany indicates an expected call of UpdateCompany.
func (mr *MockCompanyRepoMockRecorder) UpdateCompany(ctx, companyID, company any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCompany", reflect.TypeOf((*MockCompanyRepo)(nil).UpdateCompany), ctx, companyID, company)
}

// MockPersonRepo is a mock of PersonRepo interface.
type MockPersonRepo struct {
	ctrl     *gomock.Controller
	recorder *MockPersonRepoMockRecorder
	isgomock struct{}
}

// MockPersonRepoMockRecorder is the mock recorder for MockPersonRepo.
type MockPersonRepoMockRecorder struct {
	mock *MockPersonRepo
}

// NewMockPersonRepo creates a new mock instance.
func NewMockPersonRepo(ctrl *gomock.Controller) *MockPersonRepo {
	mock := &MockPersonRepo{ctrl: ctrl}
	mock.recorder = &MockPersonRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersonRepo) EXPECT() *MockPersonRepoMockRecorder {
	return m.recorder
}

// CreatePerson mocks base method.
func (m *MockPersonRepo) CreatePerson(ctx context.Context, person entity.Person) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePerson", ctx, person)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePerson indicates an expected call of CreatePerson.
func (mr *MockPersonRepoMockRecorder) CreatePerson(ctx, person any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePerson", reflect.TypeOf((*MockPersonRepo)(nil).CreatePerson), ctx, person)
}

// DeletePerson mocks base method.
func (m *MockPersonRepo) DeletePerson(ctx context.Context, personID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePerson", ctx, personID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePerson indicates an expected call of DeletePerson.
func (mr *MockPersonRepoMockRecorder) DeletePerson(ctx, personID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePerson", reflect.TypeOf((*MockPersonRepo)(nil).DeletePerson), ctx, personID)
}

// GetPeopleCountByCompany mocks base method.
func (m *MockPersonRepo) GetPeopleCountByCompany(ctx context.Context, companyID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeopleCountByCompany", ctx, companyID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPeopleCountByCompany indicates an expected call of GetPeopleCountByCompany.
func (mr *MockPersonRepoMockRecorder) GetPeopleCountByCompany(ctx, companyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeopleCountByCompany", reflect.TypeOf((*MockPersonRepo)(nil).GetPeopleCountByCompany), ctx, companyID)
}

// GetPersonByUUID mocks base method.
func (m *MockPersonRepo) GetPersonByUUID(ctx context.Context, personUUID string) (entity.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersonByUUID", ctx, personUUID)
	ret0, _ := ret[0].(entity.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPersonByUUID indicates an expected call of GetPersonByUUID.
func (mr *MockPersonRepoMockRecorder) GetPersonByUUID(ctx, personUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersonByUUID", reflect.TypeOf((*MockPersonRepo)(nil).GetPersonByUUID), ctx, personUUID)
}

// GetPersonsByCompany mocks base method.
func (m *MockPersonRepo) GetPersonsByCompany(ctx context.Context, companyID int64) ([]entity.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersonsByCompany", ctx, companyID)
	ret0, _ := ret[0].([]entity.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPersonsByCompany indicates an expected call of GetPersonsByCompany.
func (mr *MockPersonRepoMockRecorder) GetPersonsByCompany(ctx, companyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersonsByCompany", reflect.TypeOf((*MockPersonRepo)(nil).GetPersonsByCompany), ctx, companyID)
}

// SearchPeople mocks base method.
func (m *MockPersonRepo) SearchPeople(ctx context.Context, companyID int64, search string) ([]entity.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchPeople", ctx, companyID, search)
	ret0, _ := ret[0].([]entity.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchPeople indicates an expected call of SearchPeople.
func (mr *MockPersonRepoMockRecorder) SearchPeople(ctx, companyID, search any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchPeople", reflect.TypeOf((*MockPersonRepo)(nil).SearchPeople), ctx, companyID, search)
}

// UpdatePerson mocks base method.
func (m *MockPersonRepo) UpdatePerson(ctx context.Context, personID int64, person entity.Person) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePerson", ctx, personID, person)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePerson indicates an expected call of UpdatePerson.
func (mr *MockPersonRepoMockRecorder) UpdatePerson(ctx, personID, person any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePerson", reflect.TypeOf((*MockPersonRepo)(nil).UpdatePerson), ctx, personID, person)
}

// MockNoteRepo is a mock of NoteRepo interface.
type MockNoteRepo struct {
	ctrl     *gomock.Controller
	recorder *MockNoteRepoMockRecorder
	isgomock struct{}
}

// MockNoteRepoMockRecorder is the mock recorder for MockNoteRepo.
type MockNoteRepoMockRecorder struct {
	mock *MockNoteRepo
}

// NewMockNoteRepo creates a new mock instance.
func NewMockNoteRepo(ctrl *gomock.Controller) *MockNoteRepo {
	mock := &MockNoteRepo{ctrl: ctrl}
	mock.recorder = &MockNoteRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNoteRepo) EXPECT() *MockNoteRepoMockRecorder {
	return m.recorder
}

// CreateNote mocks base method.
func (m *MockNoteRepo) CreateNote(ctx context.Context, note entity.Note) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNote", ctx, note)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNote indicates an expected call of CreateNote.
func (mr *MockNoteRepoMockRecorder) CreateNote(ctx, note any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNote", reflect.TypeOf((*MockNoteRepo)(nil).CreateNote), ctx, note)
}

// CreateNoteMention mocks base method.
func (m *MockNoteRepo) CreateNoteMention(ctx context.Context, mention entity.NoteMention) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNoteMention", ctx, mention)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNoteMention indicates an expected call of CreateNoteMention.
func (mr *MockNoteRepoMockRecorder) CreateNoteMention(ctx, mention any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNoteMention", reflect.TypeOf((*MockNoteRepo)(nil).CreateNoteMention), ctx, mention)
}

// DeleteMentionsByNote mocks base method.
func (m *MockNoteRepo) DeleteMentionsByNote(ctx context.Context, noteID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMentionsByNote", ctx, noteID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMentionsByNote indicates an expected call of DeleteMentionsByNote.
func (mr *MockNoteRepoMockRecorder) DeleteMentionsByNote(ctx, noteID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMentionsByNote", reflect.TypeOf((*MockNoteRepo)(nil).DeleteMentionsByNote), ctx, noteID)
}

// DeleteNote mocks base method.
func (m *MockNoteRepo) DeleteNote(ctx context.Context, noteID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNote", ctx, noteID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNote indicates an expected call of DeleteNote.
func (mr *MockNoteRepoMockRecorder) DeleteNote(ctx, noteID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNote", reflect.TypeOf((*MockNoteRepo)(nil).DeleteNote), ctx, noteID)
}

// GetAverageFrequencyDays mocks base method.
func (m *MockNoteRepo) GetAverageFrequencyDays(ctx context.Context, companyID int64) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAverageFrequencyDays", ctx, companyID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAverageFrequencyDays indicates an expected call of GetAverageFrequencyDays.
func (mr *MockNoteRepoMockRecorder) GetAverageFrequencyDays(ctx, companyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAverageFrequencyDays", reflect.TypeOf((*MockNoteRepo)(nil).GetAverageFrequencyDays), ctx, companyID)
}

// GetLastMeetingDate mocks base method.
func (m *MockNoteRepo) GetLastMeetingDate(ctx context.Context, companyID int64) (*time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastMeetingDate", ctx, companyID)
	ret0, _ := ret[0].(*time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastMeetingDate indicates an expected call of GetLastMeetingDate.
func (mr *MockNoteRepoMockRecorder) GetLastMeetingDate(ctx, companyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastMeetingDate", reflect.TypeOf((*MockNoteRepo)(nil).GetLastMeetingDate), ctx, companyID)
}

// GetMentionsByPerson mocks base method.
func (m *MockNoteRepo) GetMentionsByPerson(ctx context.Context, mentionedPersonID, take, skip int64) ([]entity.NoteMention, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMentionsByPerson", ctx, mentionedPersonID, take, skip)
	ret0, _ := ret[0].([]entity.NoteMention)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMentionsByPerson indicates an expected call of GetMentionsByPerson.
func (mr *MockNoteRepoMockRecorder) GetMentionsByPerson(ctx, mentionedPersonID, take, skip any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMentionsByPerson", reflect.TypeOf((*MockNoteRepo)(nil).GetMentionsByPerson), ctx, mentionedPersonID, take, skip)
}

// GetNoteByUUID mocks base method.
func (m *MockNoteRepo) GetNoteByUUID(ctx context.Context, noteUUID string) (entity.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNoteByUUID", ctx, noteUUID)
	ret0, _ := ret[0].(entity.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNoteByUUID indicates an expected call of GetNoteByUUID.
func (mr *MockNoteRepoMockRecorder) GetNoteByUUID(ctx, noteUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNoteByUUID", reflect.TypeOf((*MockNoteRepo)(nil).GetNoteByUUID), ctx, noteUUID)
}

// GetNotesByPerson mocks base method.
func (m *MockNoteRepo) GetNotesByPerson(ctx context.Context, personID, take, skip int64) ([]entity.Note, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotesByPerson", ctx, personID, take, skip)
	ret0, _ := ret[0].([]entity.Note)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNotesByPerson indicates an expected call of GetNotesByPerson.
func (mr *MockNoteRepoMockRecorder) GetNotesByPerson(ctx, personID, take, skip any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotesByPerson", reflect.TypeOf((*MockNoteRepo)(nil).GetNotesByPerson), ctx, personID, take, skip)
}

// GetOneOnOnesCountThisMonth mocks base method.
func (m *MockNoteRepo) GetOneOnOnesCountThisMonth(ctx context.Context, companyID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneOnOnesCountThisMonth", ctx, companyID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneOnOnesCountThisMonth indicates an expected call of GetOneOnOnesCountThisMonth.
func (mr *MockNoteRepoMockRecorder) GetOneOnOnesCountThisMonth(ctx, companyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneOnOnesCountThisMonth", reflect.TypeOf((*MockNoteRepo)(nil).GetOneOnOnesCountThisMonth), ctx, companyID)
}

// GetPersonMentions mocks base method.
func (m *MockNoteRepo) GetPersonMentions(ctx context.Context, mentionedPersonID, take, skip int64) ([]entity.MentionEntry, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersonMentions", ctx, mentionedPersonID, take, skip)
	ret0, _ := ret[0].([]entity.MentionEntry)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPersonMentions indicates an expected call of GetPersonMentions.
func (mr *MockNoteRepoMockRecorder) GetPersonMentions(ctx, mentionedPersonID, take, skip any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersonMentions", reflect.TypeOf((*MockNoteRepo)(nil).GetPersonMentions), ctx, mentionedPersonID, take, skip)
}

// GetPersonTimeline mocks base method.
func (m *MockNoteRepo) GetPersonTimeline(ctx context.Context, personID int64, filters entity.TimelineFilters, take, skip int64) ([]entity.UnifiedTimelineEntry, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersonTimeline", ctx, personID, filters, take, skip)
	ret0, _ := ret[0].([]entity.UnifiedTimelineEntry)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPersonTimeline indicates an expected call of GetPersonTimeline.
func (mr *MockNoteRepoMockRecorder) GetPersonTimeline(ctx, personID, filters, take, skip any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersonTimeline", reflect.TypeOf((*MockNoteRepo)(nil).GetPersonTimeline), ctx, personID, filters, take, skip)
}

// UpdateNote mocks base method.
func (m *MockNoteRepo) UpdateNote(ctx context.Context, noteID int64, note entity.Note) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNote", ctx, noteID, note)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNote indicates an expected call of UpdateNote.
func (mr *MockNoteRepoMockRecorder) UpdateNote(ctx, noteID, note any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNote", reflect.TypeOf((*MockNoteRepo)(nil).UpdateNote), ctx, noteID, note)
}
