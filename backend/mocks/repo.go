// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/contract/repo.go
//
// Generated by this command:
//
//	mockgen -package mocks -source=internal/domain/contract/repo.go -destination=mocks/repo.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dto "github.com/diegoclair/leaderpro/internal/application/dto"
	contract "github.com/diegoclair/leaderpro/internal/domain/contract"
	entity "github.com/diegoclair/leaderpro/internal/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockDataManager is a mock of DataManager interface.
type MockDataManager struct {
	ctrl     *gomock.Controller
	recorder *MockDataManagerMockRecorder
	isgomock struct{}
}

// MockDataManagerMockRecorder is the mock recorder for MockDataManager.
type MockDataManagerMockRecorder struct {
	mock *MockDataManager
}

// NewMockDataManager creates a new mock instance.
func NewMockDataManager(ctrl *gomock.Controller) *MockDataManager {
	mock := &MockDataManager{ctrl: ctrl}
	mock.recorder = &MockDataManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataManager) EXPECT() *MockDataManagerMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *MockDataManager) Auth() contract.AuthRepo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth")
	ret0, _ := ret[0].(contract.AuthRepo)
	return ret0
}

// Auth indicates an expected call of Auth.
func (mr *MockDataManagerMockRecorder) Auth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockDataManager)(nil).Auth))
}

// Company mocks base method.
func (m *MockDataManager) Company() contract.CompanyRepo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Company")
	ret0, _ := ret[0].(contract.CompanyRepo)
	return ret0
}

// Company indicates an expected call of Company.
func (mr *MockDataManagerMockRecorder) Company() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Company", reflect.TypeOf((*MockDataManager)(nil).Company))
}

// Feedback mocks base method.
func (m *MockDataManager) Feedback() contract.FeedbackRepo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Feedback")
	ret0, _ := ret[0].(contract.FeedbackRepo)
	return ret0
}

// Feedback indicates an expected call of Feedback.
func (mr *MockDataManagerMockRecorder) Feedback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Feedback", reflect.TypeOf((*MockDataManager)(nil).Feedback))
}

// OneOnOne mocks base method.
func (m *MockDataManager) OneOnOne() contract.OneOnOneRepo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OneOnOne")
	ret0, _ := ret[0].(contract.OneOnOneRepo)
	return ret0
}

// OneOnOne indicates an expected call of OneOnOne.
func (mr *MockDataManagerMockRecorder) OneOnOne() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OneOnOne", reflect.TypeOf((*MockDataManager)(nil).OneOnOne))
}

// Person mocks base method.
func (m *MockDataManager) Person() contract.PersonRepo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Person")
	ret0, _ := ret[0].(contract.PersonRepo)
	return ret0
}

// Person indicates an expected call of Person.
func (mr *MockDataManagerMockRecorder) Person() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Person", reflect.TypeOf((*MockDataManager)(nil).Person))
}

// User mocks base method.
func (m *MockDataManager) User() contract.UserRepo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User")
	ret0, _ := ret[0].(contract.UserRepo)
	return ret0
}

// User indicates an expected call of User.
func (mr *MockDataManagerMockRecorder) User() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockDataManager)(nil).User))
}

// WithTransaction mocks base method.
func (m *MockDataManager) WithTransaction(ctx context.Context, fn func(contract.DataManager) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTransaction", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithTransaction indicates an expected call of WithTransaction.
func (mr *MockDataManagerMockRecorder) WithTransaction(ctx, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTransaction", reflect.TypeOf((*MockDataManager)(nil).WithTransaction), ctx, fn)
}

// MockAuthRepo is a mock of AuthRepo interface.
type MockAuthRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAuthRepoMockRecorder
	isgomock struct{}
}

// MockAuthRepoMockRecorder is the mock recorder for MockAuthRepo.
type MockAuthRepoMockRecorder struct {
	mock *MockAuthRepo
}

// NewMockAuthRepo creates a new mock instance.
func NewMockAuthRepo(ctrl *gomock.Controller) *MockAuthRepo {
	mock := &MockAuthRepo{ctrl: ctrl}
	mock.recorder = &MockAuthRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthRepo) EXPECT() *MockAuthRepoMockRecorder {
	return m.recorder
}

// CreateSession mocks base method.
func (m *MockAuthRepo) CreateSession(ctx context.Context, session dto.Session) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ctx, session)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockAuthRepoMockRecorder) CreateSession(ctx, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockAuthRepo)(nil).CreateSession), ctx, session)
}

// GetSessionByUUID mocks base method.
func (m *MockAuthRepo) GetSessionByUUID(ctx context.Context, sessionUUID string) (dto.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionByUUID", ctx, sessionUUID)
	ret0, _ := ret[0].(dto.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionByUUID indicates an expected call of GetSessionByUUID.
func (mr *MockAuthRepoMockRecorder) GetSessionByUUID(ctx, sessionUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionByUUID", reflect.TypeOf((*MockAuthRepo)(nil).GetSessionByUUID), ctx, sessionUUID)
}

// SetSessionAsBlocked mocks base method.
func (m *MockAuthRepo) SetSessionAsBlocked(ctx context.Context, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSessionAsBlocked", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSessionAsBlocked indicates an expected call of SetSessionAsBlocked.
func (mr *MockAuthRepoMockRecorder) SetSessionAsBlocked(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSessionAsBlocked", reflect.TypeOf((*MockAuthRepo)(nil).SetSessionAsBlocked), ctx, userID)
}

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
	isgomock struct{}
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepo) CreateUser(ctx context.Context, user entity.User) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepoMockRecorder) CreateUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepo)(nil).CreateUser), ctx, user)
}

// GetUserByEmail mocks base method.
func (m *MockUserRepo) GetUserByEmail(ctx context.Context, email string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserRepoMockRecorder) GetUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserRepo)(nil).GetUserByEmail), ctx, email)
}

// GetUserByUUID mocks base method.
func (m *MockUserRepo) GetUserByUUID(ctx context.Context, userUUID string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUUID", ctx, userUUID)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUUID indicates an expected call of GetUserByUUID.
func (mr *MockUserRepoMockRecorder) GetUserByUUID(ctx, userUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUUID", reflect.TypeOf((*MockUserRepo)(nil).GetUserByUUID), ctx, userUUID)
}

// GetUserIDByUUID mocks base method.
func (m *MockUserRepo) GetUserIDByUUID(ctx context.Context, userUUID string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDByUUID", ctx, userUUID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIDByUUID indicates an expected call of GetUserIDByUUID.
func (mr *MockUserRepoMockRecorder) GetUserIDByUUID(ctx, userUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDByUUID", reflect.TypeOf((*MockUserRepo)(nil).GetUserIDByUUID), ctx, userUUID)
}

// UpdateLastLogin mocks base method.
func (m *MockUserRepo) UpdateLastLogin(ctx context.Context, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLastLogin", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLastLogin indicates an expected call of UpdateLastLogin.
func (mr *MockUserRepoMockRecorder) UpdateLastLogin(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLastLogin", reflect.TypeOf((*MockUserRepo)(nil).UpdateLastLogin), ctx, userID)
}

// UpdateUser mocks base method.
func (m *MockUserRepo) UpdateUser(ctx context.Context, userID int64, user entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, userID, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserRepoMockRecorder) UpdateUser(ctx, userID, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserRepo)(nil).UpdateUser), ctx, userID, user)
}

// MockCompanyRepo is a mock of CompanyRepo interface.
type MockCompanyRepo struct {
	ctrl     *gomock.Controller
	recorder *MockCompanyRepoMockRecorder
	isgomock struct{}
}

// MockCompanyRepoMockRecorder is the mock recorder for MockCompanyRepo.
type MockCompanyRepoMockRecorder struct {
	mock *MockCompanyRepo
}

// NewMockCompanyRepo creates a new mock instance.
func NewMockCompanyRepo(ctrl *gomock.Controller) *MockCompanyRepo {
	mock := &MockCompanyRepo{ctrl: ctrl}
	mock.recorder = &MockCompanyRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompanyRepo) EXPECT() *MockCompanyRepoMockRecorder {
	return m.recorder
}

// CreateCompany mocks base method.
func (m *MockCompanyRepo) CreateCompany(ctx context.Context, company entity.Company) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompany", ctx, company)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCompany indicates an expected call of CreateCompany.
func (mr *MockCompanyRepoMockRecorder) CreateCompany(ctx, company any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompany", reflect.TypeOf((*MockCompanyRepo)(nil).CreateCompany), ctx, company)
}

// DeleteCompany mocks base method.
func (m *MockCompanyRepo) DeleteCompany(ctx context.Context, companyID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCompany", ctx, companyID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCompany indicates an expected call of DeleteCompany.
func (mr *MockCompanyRepoMockRecorder) DeleteCompany(ctx, companyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCompany", reflect.TypeOf((*MockCompanyRepo)(nil).DeleteCompany), ctx, companyID)
}

// GetCompaniesByUser mocks base method.
func (m *MockCompanyRepo) GetCompaniesByUser(ctx context.Context, userID int64) ([]entity.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompaniesByUser", ctx, userID)
	ret0, _ := ret[0].([]entity.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompaniesByUser indicates an expected call of GetCompaniesByUser.
func (mr *MockCompanyRepoMockRecorder) GetCompaniesByUser(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompaniesByUser", reflect.TypeOf((*MockCompanyRepo)(nil).GetCompaniesByUser), ctx, userID)
}

// GetCompanyByUUID mocks base method.
func (m *MockCompanyRepo) GetCompanyByUUID(ctx context.Context, companyUUID string) (entity.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyByUUID", ctx, companyUUID)
	ret0, _ := ret[0].(entity.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyByUUID indicates an expected call of GetCompanyByUUID.
func (mr *MockCompanyRepoMockRecorder) GetCompanyByUUID(ctx, companyUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyByUUID", reflect.TypeOf((*MockCompanyRepo)(nil).GetCompanyByUUID), ctx, companyUUID)
}

// UpdateCompany mocks base method.
func (m *MockCompanyRepo) UpdateCompany(ctx context.Context, companyID int64, company entity.Company) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCompany", ctx, companyID, company)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCompany indicates an expected call of UpdateCompany.
func (mr *MockCompanyRepoMockRecorder) UpdateCompany(ctx, companyID, company any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCompany", reflect.TypeOf((*MockCompanyRepo)(nil).UpdateCompany), ctx, companyID, company)
}

// MockPersonRepo is a mock of PersonRepo interface.
type MockPersonRepo struct {
	ctrl     *gomock.Controller
	recorder *MockPersonRepoMockRecorder
	isgomock struct{}
}

// MockPersonRepoMockRecorder is the mock recorder for MockPersonRepo.
type MockPersonRepoMockRecorder struct {
	mock *MockPersonRepo
}

// NewMockPersonRepo creates a new mock instance.
func NewMockPersonRepo(ctrl *gomock.Controller) *MockPersonRepo {
	mock := &MockPersonRepo{ctrl: ctrl}
	mock.recorder = &MockPersonRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersonRepo) EXPECT() *MockPersonRepoMockRecorder {
	return m.recorder
}

// CreatePerson mocks base method.
func (m *MockPersonRepo) CreatePerson(ctx context.Context, person entity.Person) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePerson", ctx, person)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePerson indicates an expected call of CreatePerson.
func (mr *MockPersonRepoMockRecorder) CreatePerson(ctx, person any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePerson", reflect.TypeOf((*MockPersonRepo)(nil).CreatePerson), ctx, person)
}

// DeletePerson mocks base method.
func (m *MockPersonRepo) DeletePerson(ctx context.Context, personID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePerson", ctx, personID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePerson indicates an expected call of DeletePerson.
func (mr *MockPersonRepoMockRecorder) DeletePerson(ctx, personID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePerson", reflect.TypeOf((*MockPersonRepo)(nil).DeletePerson), ctx, personID)
}

// GetPersonByUUID mocks base method.
func (m *MockPersonRepo) GetPersonByUUID(ctx context.Context, personUUID string) (entity.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersonByUUID", ctx, personUUID)
	ret0, _ := ret[0].(entity.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPersonByUUID indicates an expected call of GetPersonByUUID.
func (mr *MockPersonRepoMockRecorder) GetPersonByUUID(ctx, personUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersonByUUID", reflect.TypeOf((*MockPersonRepo)(nil).GetPersonByUUID), ctx, personUUID)
}

// GetPersonsByCompany mocks base method.
func (m *MockPersonRepo) GetPersonsByCompany(ctx context.Context, companyID int64) ([]entity.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersonsByCompany", ctx, companyID)
	ret0, _ := ret[0].([]entity.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPersonsByCompany indicates an expected call of GetPersonsByCompany.
func (mr *MockPersonRepoMockRecorder) GetPersonsByCompany(ctx, companyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersonsByCompany", reflect.TypeOf((*MockPersonRepo)(nil).GetPersonsByCompany), ctx, companyID)
}

// SearchPeople mocks base method.
func (m *MockPersonRepo) SearchPeople(ctx context.Context, companyID int64, search string) ([]entity.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchPeople", ctx, companyID, search)
	ret0, _ := ret[0].([]entity.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchPeople indicates an expected call of SearchPeople.
func (mr *MockPersonRepoMockRecorder) SearchPeople(ctx, companyID, search any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchPeople", reflect.TypeOf((*MockPersonRepo)(nil).SearchPeople), ctx, companyID, search)
}

// UpdatePerson mocks base method.
func (m *MockPersonRepo) UpdatePerson(ctx context.Context, personID int64, person entity.Person) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePerson", ctx, personID, person)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePerson indicates an expected call of UpdatePerson.
func (mr *MockPersonRepoMockRecorder) UpdatePerson(ctx, personID, person any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePerson", reflect.TypeOf((*MockPersonRepo)(nil).UpdatePerson), ctx, personID, person)
}

// MockOneOnOneRepo is a mock of OneOnOneRepo interface.
type MockOneOnOneRepo struct {
	ctrl     *gomock.Controller
	recorder *MockOneOnOneRepoMockRecorder
	isgomock struct{}
}

// MockOneOnOneRepoMockRecorder is the mock recorder for MockOneOnOneRepo.
type MockOneOnOneRepoMockRecorder struct {
	mock *MockOneOnOneRepo
}

// NewMockOneOnOneRepo creates a new mock instance.
func NewMockOneOnOneRepo(ctrl *gomock.Controller) *MockOneOnOneRepo {
	mock := &MockOneOnOneRepo{ctrl: ctrl}
	mock.recorder = &MockOneOnOneRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOneOnOneRepo) EXPECT() *MockOneOnOneRepoMockRecorder {
	return m.recorder
}

// CreateOneOnOne mocks base method.
func (m *MockOneOnOneRepo) CreateOneOnOne(ctx context.Context, oneOnOne entity.OneOnOne) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOneOnOne", ctx, oneOnOne)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOneOnOne indicates an expected call of CreateOneOnOne.
func (mr *MockOneOnOneRepoMockRecorder) CreateOneOnOne(ctx, oneOnOne any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOneOnOne", reflect.TypeOf((*MockOneOnOneRepo)(nil).CreateOneOnOne), ctx, oneOnOne)
}

// DeleteOneOnOne mocks base method.
func (m *MockOneOnOneRepo) DeleteOneOnOne(ctx context.Context, oneOnOneID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOneOnOne", ctx, oneOnOneID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOneOnOne indicates an expected call of DeleteOneOnOne.
func (mr *MockOneOnOneRepoMockRecorder) DeleteOneOnOne(ctx, oneOnOneID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOneOnOne", reflect.TypeOf((*MockOneOnOneRepo)(nil).DeleteOneOnOne), ctx, oneOnOneID)
}

// GetOneOnOneByUUID mocks base method.
func (m *MockOneOnOneRepo) GetOneOnOneByUUID(ctx context.Context, oneOnOneUUID string) (entity.OneOnOne, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneOnOneByUUID", ctx, oneOnOneUUID)
	ret0, _ := ret[0].(entity.OneOnOne)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneOnOneByUUID indicates an expected call of GetOneOnOneByUUID.
func (mr *MockOneOnOneRepoMockRecorder) GetOneOnOneByUUID(ctx, oneOnOneUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneOnOneByUUID", reflect.TypeOf((*MockOneOnOneRepo)(nil).GetOneOnOneByUUID), ctx, oneOnOneUUID)
}

// GetOneOnOnesByManager mocks base method.
func (m *MockOneOnOneRepo) GetOneOnOnesByManager(ctx context.Context, managerID, take, skip int64) ([]entity.OneOnOne, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneOnOnesByManager", ctx, managerID, take, skip)
	ret0, _ := ret[0].([]entity.OneOnOne)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOneOnOnesByManager indicates an expected call of GetOneOnOnesByManager.
func (mr *MockOneOnOneRepoMockRecorder) GetOneOnOnesByManager(ctx, managerID, take, skip any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneOnOnesByManager", reflect.TypeOf((*MockOneOnOneRepo)(nil).GetOneOnOnesByManager), ctx, managerID, take, skip)
}

// GetOneOnOnesByPerson mocks base method.
func (m *MockOneOnOneRepo) GetOneOnOnesByPerson(ctx context.Context, personID, take, skip int64) ([]entity.OneOnOne, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneOnOnesByPerson", ctx, personID, take, skip)
	ret0, _ := ret[0].([]entity.OneOnOne)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOneOnOnesByPerson indicates an expected call of GetOneOnOnesByPerson.
func (mr *MockOneOnOneRepoMockRecorder) GetOneOnOnesByPerson(ctx, personID, take, skip any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneOnOnesByPerson", reflect.TypeOf((*MockOneOnOneRepo)(nil).GetOneOnOnesByPerson), ctx, personID, take, skip)
}

// GetOverdueOneOnOnes mocks base method.
func (m *MockOneOnOneRepo) GetOverdueOneOnOnes(ctx context.Context, managerID int64) ([]entity.OneOnOne, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOverdueOneOnOnes", ctx, managerID)
	ret0, _ := ret[0].([]entity.OneOnOne)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOverdueOneOnOnes indicates an expected call of GetOverdueOneOnOnes.
func (mr *MockOneOnOneRepoMockRecorder) GetOverdueOneOnOnes(ctx, managerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOverdueOneOnOnes", reflect.TypeOf((*MockOneOnOneRepo)(nil).GetOverdueOneOnOnes), ctx, managerID)
}

// GetUpcomingOneOnOnes mocks base method.
func (m *MockOneOnOneRepo) GetUpcomingOneOnOnes(ctx context.Context, managerID int64) ([]entity.OneOnOne, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpcomingOneOnOnes", ctx, managerID)
	ret0, _ := ret[0].([]entity.OneOnOne)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpcomingOneOnOnes indicates an expected call of GetUpcomingOneOnOnes.
func (mr *MockOneOnOneRepoMockRecorder) GetUpcomingOneOnOnes(ctx, managerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpcomingOneOnOnes", reflect.TypeOf((*MockOneOnOneRepo)(nil).GetUpcomingOneOnOnes), ctx, managerID)
}

// UpdateOneOnOne mocks base method.
func (m *MockOneOnOneRepo) UpdateOneOnOne(ctx context.Context, oneOnOneID int64, oneOnOne entity.OneOnOne) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOneOnOne", ctx, oneOnOneID, oneOnOne)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOneOnOne indicates an expected call of UpdateOneOnOne.
func (mr *MockOneOnOneRepoMockRecorder) UpdateOneOnOne(ctx, oneOnOneID, oneOnOne any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOneOnOne", reflect.TypeOf((*MockOneOnOneRepo)(nil).UpdateOneOnOne), ctx, oneOnOneID, oneOnOne)
}

// MockFeedbackRepo is a mock of FeedbackRepo interface.
type MockFeedbackRepo struct {
	ctrl     *gomock.Controller
	recorder *MockFeedbackRepoMockRecorder
	isgomock struct{}
}

// MockFeedbackRepoMockRecorder is the mock recorder for MockFeedbackRepo.
type MockFeedbackRepoMockRecorder struct {
	mock *MockFeedbackRepo
}

// NewMockFeedbackRepo creates a new mock instance.
func NewMockFeedbackRepo(ctrl *gomock.Controller) *MockFeedbackRepo {
	mock := &MockFeedbackRepo{ctrl: ctrl}
	mock.recorder = &MockFeedbackRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeedbackRepo) EXPECT() *MockFeedbackRepoMockRecorder {
	return m.recorder
}

// CreateFeedback mocks base method.
func (m *MockFeedbackRepo) CreateFeedback(ctx context.Context, feedback entity.Feedback) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFeedback", ctx, feedback)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFeedback indicates an expected call of CreateFeedback.
func (mr *MockFeedbackRepoMockRecorder) CreateFeedback(ctx, feedback any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFeedback", reflect.TypeOf((*MockFeedbackRepo)(nil).CreateFeedback), ctx, feedback)
}

// DeleteFeedback mocks base method.
func (m *MockFeedbackRepo) DeleteFeedback(ctx context.Context, feedbackID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFeedback", ctx, feedbackID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFeedback indicates an expected call of DeleteFeedback.
func (mr *MockFeedbackRepoMockRecorder) DeleteFeedback(ctx, feedbackID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFeedback", reflect.TypeOf((*MockFeedbackRepo)(nil).DeleteFeedback), ctx, feedbackID)
}

// GetFeedbackByGiver mocks base method.
func (m *MockFeedbackRepo) GetFeedbackByGiver(ctx context.Context, giverID, take, skip int64) ([]entity.Feedback, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeedbackByGiver", ctx, giverID, take, skip)
	ret0, _ := ret[0].([]entity.Feedback)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetFeedbackByGiver indicates an expected call of GetFeedbackByGiver.
func (mr *MockFeedbackRepoMockRecorder) GetFeedbackByGiver(ctx, giverID, take, skip any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeedbackByGiver", reflect.TypeOf((*MockFeedbackRepo)(nil).GetFeedbackByGiver), ctx, giverID, take, skip)
}

// GetFeedbackByPerson mocks base method.
func (m *MockFeedbackRepo) GetFeedbackByPerson(ctx context.Context, personID, take, skip int64) ([]entity.Feedback, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeedbackByPerson", ctx, personID, take, skip)
	ret0, _ := ret[0].([]entity.Feedback)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetFeedbackByPerson indicates an expected call of GetFeedbackByPerson.
func (mr *MockFeedbackRepoMockRecorder) GetFeedbackByPerson(ctx, personID, take, skip any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeedbackByPerson", reflect.TypeOf((*MockFeedbackRepo)(nil).GetFeedbackByPerson), ctx, personID, take, skip)
}

// GetFeedbackByUUID mocks base method.
func (m *MockFeedbackRepo) GetFeedbackByUUID(ctx context.Context, feedbackUUID string) (entity.Feedback, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeedbackByUUID", ctx, feedbackUUID)
	ret0, _ := ret[0].(entity.Feedback)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeedbackByUUID indicates an expected call of GetFeedbackByUUID.
func (mr *MockFeedbackRepoMockRecorder) GetFeedbackByUUID(ctx, feedbackUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeedbackByUUID", reflect.TypeOf((*MockFeedbackRepo)(nil).GetFeedbackByUUID), ctx, feedbackUUID)
}

// GetFeedbackSummary mocks base method.
func (m *MockFeedbackRepo) GetFeedbackSummary(ctx context.Context, personID int64, period string) (entity.FeedbackSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeedbackSummary", ctx, personID, period)
	ret0, _ := ret[0].(entity.FeedbackSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeedbackSummary indicates an expected call of GetFeedbackSummary.
func (mr *MockFeedbackRepoMockRecorder) GetFeedbackSummary(ctx, personID, period any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeedbackSummary", reflect.TypeOf((*MockFeedbackRepo)(nil).GetFeedbackSummary), ctx, personID, period)
}

// UpdateFeedback mocks base method.
func (m *MockFeedbackRepo) UpdateFeedback(ctx context.Context, feedbackID int64, feedback entity.Feedback) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFeedback", ctx, feedbackID, feedback)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFeedback indicates an expected call of UpdateFeedback.
func (mr *MockFeedbackRepoMockRecorder) UpdateFeedback(ctx, feedbackID, feedback any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFeedback", reflect.TypeOf((*MockFeedbackRepo)(nil).UpdateFeedback), ctx, feedbackID, feedback)
}
