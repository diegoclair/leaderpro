// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/contract/ai.go
//
// Generated by this command:
//
//	mockgen -package mocks -source=internal/domain/contract/ai.go -destination=mocks/ai.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/diegoclair/leaderpro/internal/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockAIProvider is a mock of AIProvider interface.
type MockAIProvider struct {
	ctrl     *gomock.Controller
	recorder *MockAIProviderMockRecorder
	isgomock struct{}
}

// MockAIProviderMockRecorder is the mock recorder for MockAIProvider.
type MockAIProviderMockRecorder struct {
	mock *MockAIProvider
}

// NewMockAIProvider creates a new mock instance.
func NewMockAIProvider(ctrl *gomock.Controller) *MockAIProvider {
	mock := &MockAIProvider{ctrl: ctrl}
	mock.recorder = &MockAIProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAIProvider) EXPECT() *MockAIProviderMockRecorder {
	return m.recorder
}

// Chat mocks base method.
func (m *MockAIProvider) Chat(ctx context.Context, req entity.ChatRequest, systemPrompt, contextPrompt string) (entity.ChatResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chat", ctx, req, systemPrompt, contextPrompt)
	ret0, _ := ret[0].(entity.ChatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Chat indicates an expected call of Chat.
func (mr *MockAIProviderMockRecorder) Chat(ctx, req, systemPrompt, contextPrompt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chat", reflect.TypeOf((*MockAIProvider)(nil).Chat), ctx, req, systemPrompt, contextPrompt)
}

// ExtractAttributes mocks base method.
func (m *MockAIProvider) ExtractAttributes(ctx context.Context, req entity.ExtractionRequest, extractionPrompt string) (map[string]string, entity.AIUsage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractAttributes", ctx, req, extractionPrompt)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(entity.AIUsage)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ExtractAttributes indicates an expected call of ExtractAttributes.
func (mr *MockAIProviderMockRecorder) ExtractAttributes(ctx, req, extractionPrompt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractAttributes", reflect.TypeOf((*MockAIProvider)(nil).ExtractAttributes), ctx, req, extractionPrompt)
}

// GetProviderName mocks base method.
func (m *MockAIProvider) GetProviderName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProviderName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetProviderName indicates an expected call of GetProviderName.
func (mr *MockAIProviderMockRecorder) GetProviderName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviderName", reflect.TypeOf((*MockAIProvider)(nil).GetProviderName))
}
